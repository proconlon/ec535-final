// our notes and defaults are here, but actual default values are in the config_ui.py file
{
  "systemInfo": {
    "rtosSchedulerPolicy": "FIFO", // Possible FIFO or RR
    "rtosTimeSliceMsRR": 10 // only for RR
  },

  // This is the base data collection rate always saved, much lower sample rate compared to the sim
  "persistentLogging": {
    "enabled": true,
    "samplingRateHz": 10,
    "logRotationEnabled": true, // in event the log gets too large before data is uploaded/cleared from local storage (FIFO rotation)
    "maxLogSizeMB": 512,
    "logItems": [
      "Timestamp",
      "MeltTemp",
      "InjectionPressure",
      "VibrationAmplitude",
      "VibrationFrequency",
      "Stage"
    ]
  },

  // critical events are when machine fails, we want much more data captured
  // records data like how a dashcam works, only persists/uploads data when defined event takes place
  "criticalEventCapture": {
    "enabled": true,
    "captureRateHz": 100,
    "logItems": [
      "Timestamp",
      "MeltTemp",
      "InjectionPressure",
      "VibrationAmplitude",
      "VibrationFrequency",
      "Stage"
    ],
    "preEventBufferSizeSeconds": 30, // persist this many secs BEFORE condition is met
    "postEventDurationSeconds": 60, // persist this many secs AFTER condition is met
    "retentionPolicy": "KEEP_LAST_N_EVENTS", // KEEP_LAST_N_EVENTS or KEEP_TOTAL_SIZE_MB -- defines the number of persisted events
    "retentionValue": 10, // Either a number of events (like 5, 10) or a number of MB before the oldest data is deleted (like 50MB or something)
    "uploadOnEvent": true // upload immediately when a critical event is detected
  },

  // condition for critical event to trigger
  "criticalEventTriggers": {
    "triggerDefinitions": [
      {
        "triggerId": "TEMP_HIGH", 
        "logItemName": "MeltTemp",
        "condition": "GREATER_THAN", // GREATER_THAN, LESS_THAN, EQUALS, NOT_EQUALS
        "value": 250.0
        // "debounceSeconds": 5 // TODO: may not work with sim, but in reality we should debounce the critical event trigger
      },
      {
        "triggerId": "PRESSURE_LOW",
        "logItemName": "InjectionPressure",
        "condition": "LESS_THAN",
        "value": 50.0
      },
      {
        "triggerId": "VIBRATION_AMP_HIGH",
        "logItemName": "VibrationAmplitude",
        "condition": "GREATER_THAN",
        "value": 2.5
      }
    ]
  },

  "networkManagement": {
    "uploadEnabled": true,
    "uploadMethod": "PERIODIC", // PERIODIC (on a number of seconds), STORAGE_DEFINED (after the persistent log reaches a certain size)
    "uploadAmt": 3600, // either number of seconds or number of MB in persistent log
    "maxUploadRateKBps": 100,
    "networkInterface": "eth0",

    "uploadDestination": {
      "protocol": "HTTPS",
      "serverAddress": "poop.com",
      "port": 443,
      "endpointPath": "/api/",
      "cloudProviderHint": "AWS", // plan to only implement one cloud provider if any
      "authentication": {
        "type": "Bearer",
        "token": "YOUR_SECURE_TOKEN_HERE"
      }
    }
  }
}
